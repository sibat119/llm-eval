{
    "wrt_gt": {
        "exact_match": 0.04,
        "f1_score_token_agreement": 0.13812670005532332,
        "f1_score_ranking": 0.4823687423687424,
        "accuracy_ranking": 0.49,
        "rouge_scores": {
            "rouge1": 0.32833562306258296,
            "rouge2": 0.10388357808261953,
            "rougeL": 0.308444581848821
        },
        "bleu_score": 0.027660116784389115,
        "sbert_similarity": 0.5263423033803701,
        "agreement_score": 0.48,
        "model_ground_truth_match": 0.49,
        "blackbox_ground_truth_match": 0.84,
        "both_ground_truth_match": 0.43,
        "agreement_samples": [
            {
                "model_output": "min(l)",
                "blackbox_output": "1",
                "ground_truth": "1",
                "options": "['1', '2', '3', '4']"
            },
            {
                "model_output": "a < c",
                "blackbox_output": "a < c",
                "ground_truth": "a < c",
                "options": "['a < c', 'a < b', 'a > b', 'a == b']"
            },
            {
                "model_output": "Authentication.",
                "blackbox_output": "Authentication",
                "ground_truth": "Authentication",
                "options": "['Authentication', 'Confidentiality', 'Integrity', 'Nonrepudiation']"
            },
            {
                "model_output": "b[::2] outputs [11, 13, 15, 17, 19]",
                "blackbox_output": "[11,15,19]",
                "ground_truth": "[11,15,19]",
                "options": "['[19,21]', '[11,15]', '[11,15,19]', '[13,17,21]']"
            },
            {
                "model_output": "max()",
                "blackbox_output": "max(list)",
                "ground_truth": "max(list)",
                "options": "['cmp(list)', 'len(list)', 'max(list)', 'min(list)']"
            },
            {
                "model_output": "'Chemistry'",
                "blackbox_output": "Chemistry",
                "ground_truth": "Chemistry",
                "options": "['a', 'Chemistry', '0', '1']"
            },
            {
                "model_output": "\"Free or low-cost internet access for low-income families.\"",
                "blackbox_output": "A school provides a laptop or tablet computer to all students enrolled at the school.",
                "ground_truth": "A school provides a laptop or tablet computer to all students enrolled at the school.",
                "options": "['A school allows students to bring a graphing calculator from home to complete in-class mathematics assignments.', 'A school allows students to bring a tablet computer to class every day to participate in graded quizzes.', 'A school provides a laptop or tablet computer to all students enrolled at the school.', 'A school recommends that all students purchase a computer with as much processing speed as possible so that projects run faster.']"
            },
            {
                "model_output": "\"E7_{16}\"",
                "blackbox_output": "E7_{16}",
                "ground_truth": "E7_{16}",
                "options": "['17_{16}', 'E4_{16}', 'E7_{16}', 'F4_{16}']"
            },
            {
                "model_output": "\"Moore's Law can be used to predict future growth and make informed decisions about investments in hardware and software development.\"",
                "blackbox_output": "Technology companies can set research and development goals based on anticipated processing speeds.",
                "ground_truth": "Technology companies can set research and development goals based on anticipated processing speeds.",
                "options": "['Technology companies can accurately predict the dates when new computing innovations will be available to use.', 'Technology companies can plan to double the costs of new products each time advances in processing speed occur.', 'Technology companies can set research and development goals based on anticipated processing speeds.', 'Technology companies can spend less effort developing new processors because processing speed will always improve at the observed rate.']"
            },
            {
                "model_output": "\"heads_counter equals f1ip_counter\"",
                "blackbox_output": "heads_counter = 2",
                "ground_truth": "heads_counter = 2",
                "options": "['coin_f1ip = 1', 'flip_counter = 1', 'flip_counter = 2', 'heads_counter = 2']"
            }
        ],
        "disagreement_samples": [
            {
                "model_output": "\"Line 5: count 0 should be moved to before the FOR EACH loop, so that the count is initialized before the loop starts.\"",
                "blackbox_output": "Moving the statement in line 5 so that it appears between lines 2 and 3",
                "ground_truth": "Moving the statement in line 5 so that it appears between lines 2 and 3",
                "options": "['Changing line 6 to IF(item = count)', 'Changing line 6 to IF(myList[item] = val)', 'Moving the statement in line 5 so that it appears between lines 2 and 3', 'Moving the statement in line 11 so that it appears between lines 9 and 10']"
            },
            {
                "model_output": "\"Weights of 0, 2, 5, and 21 pounds.\"",
                "blackbox_output": "1, 4, 16",
                "ground_truth": "\u22121, 0, 1, 2, 3, 5, 16, 20, 22",
                "options": "['0, 2, 5, 20', '1, 4, 16', '\u22121, 1, 2, 3, 5, 16, 20', '\u22121, 0, 1, 2, 3, 5, 16, 20, 22']"
            },
            {
                "model_output": "\"Memory constraints.\"",
                "blackbox_output": "How many programming statements the program contains",
                "ground_truth": "How many programming statements the program contains",
                "options": "['How long the program takes to run', 'How many programming statements the program contains', 'How much memory the program requires as it runs', 'How much storage space the program requires as it runs']"
            },
            {
                "model_output": "\"people and society\"",
                "blackbox_output": "What is the cost of a certain electronics product?",
                "ground_truth": "What is the cost of a certain electronics product?",
                "options": "['In what month does a particular sport receive the most searches?', 'In which political candidates are people interested?', 'What is the cost of a certain electronics product?', 'Which region of the country has the greatest number of people searching for opera performances?']"
            },
            {
                "model_output": "\"Log2(500)\"",
                "blackbox_output": "10",
                "ground_truth": "10",
                "options": "['10', '50', '250', '500']"
            },
            {
                "model_output": "\"y * 3\"",
                "blackbox_output": "3y",
                "ground_truth": "3y",
                "options": "['y+3', '3y', 'y^3', '3^y']"
            },
            {
                "model_output": "\"1\"",
                "blackbox_output": "8",
                "ground_truth": "7",
                "options": "['7', '8', '20', '100']"
            },
            {
                "model_output": "The procedure Mystery will return false.",
                "blackbox_output": "The procedure returns true when the initial value of number is even, and it otherwise returns false.",
                "ground_truth": "The procedure returns true when the initial value of number is even, and it otherwise returns false.",
                "options": "['The procedure returns true when the initial value of number is 2, and it otherwise returns false.', 'The procedure returns true when the initial value of number is greater than 2, and it otherwise returns false.', 'The procedure returns true when the initial value of number is even, and it otherwise returns false.', 'The procedure returns true when the initial value of number is odd, and it otherwise returns false.']"
            },
            {
                "model_output": "\"The method should return the index of the first such value found.\"",
                "blackbox_output": "The specification should be modified to indicate what should be done if there is more than one index of larger values.",
                "ground_truth": "The specification should be modified to indicate what should be done if there is more than one index of larger values.",
                "options": "['The method should be written on the assumption that there is only one value in the array that is larger than the given item.', 'The method should be written so as to return the index of every occurrence of a larger value.', 'The specification should be modified to indicate what should be done if there is more than one index of larger values.', 'The method should be written to output a message if more than one larger value is found.']"
            },
            {
                "model_output": "\"HTTP (Hypertext Transfer Protocol) is used to send the file from the Web server to the user.\"",
                "blackbox_output": "The file is broken into packets for transmission. The packets must be reassembled upon receipt.",
                "ground_truth": "The file is broken into packets for transmission. The packets must be reassembled upon receipt.",
                "options": "['The file is broken into packets for transmission. The packets must be reassembled upon receipt.', \"The file is broken into packets for transmission. The user's browser must request each packet in order until all packets are received.\", \"The server attempts to connect directly to the user's computer. If the connection is successful, the entire file is sent. If the connection is unsuccessful, an error message is sent to the user.\", \"The server repeatedly attempts to connect directly to the user's computer until a connection is made. Once the connection is made, the entire file is sent.\"]"
            }
        ]
    },
    "wrt_blackbox": {
        "exact_match": 0.04,
        "f1_score_token_agreement": 0.1369615060410615,
        "rouge_scores": {
            "rouge1": 0.32460197327399276,
            "rouge2": 0.1090076656002642,
            "rougeL": 0.30196304201224106
        },
        "bleu_score": 0.029287515484538944,
        "sbert_similarity": 0.5302851736545563
    }
}